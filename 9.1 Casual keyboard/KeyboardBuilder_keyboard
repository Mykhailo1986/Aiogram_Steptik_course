from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Text
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)

import sys
sys.path.append(".")
from config import TOKEN

# Вместо BOT TOKEN HERE нужно вставить токен вашего бота,
# полученный у @BotFather
API_TOKEN: str = TOKEN

# Создаем объекты бота и диспетчера
bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()


# Инициализируем объект билдера
kb_builder: ReplyKeyboardBuilder = ReplyKeyboardBuilder()


# Создаем первый список с кнопками
buttons_1: list[KeyboardButton] = [KeyboardButton(
                text=f'Кнопка {i + 1}') for i in range(6)]

# Создаем второй список с кнопками
buttons_2: list[KeyboardButton] = [KeyboardButton(
                text=f'Кнопка {i + 7}') for i in range(10)]


# Распаковываем список с кнопками в билдер методом row,
# указываем, что в одном ряду должно быть 4 кнопки
kb_builder.row(*buttons_1, width=4)
"""Метод row()
Метод row у класса ReplyKeyboardBuilder позволяет расположить кнопки клавиатуры автоматически, в зависимости от параметра width - желаемого количества кнопок в ряду. "Лишние" кнопки переносятся на следующий ряд.

Не смотря на то, что Телеграм, как мы выяснили на предыдущем шаге, позволяет в одном ряду разместить до 12 кнопок, "строитель клавиатур" позволит разместить не больше 8. Попытка указать width больше 8 приведет к ошибке."""

# Распаковываем второй список с кнопками методом add
kb_builder.add(*buttons_2)
"""Метод add()
В отличие от метода row() метод add() добавляет кнопки с нового ряда только если в предыдущем ряду для новых кнопок уже нет места. Причем, методу add все равно какой там у вас был параметр width до этого. Кнопки будут добавляться в ряд пока их там не станет 8 и только потом начнут заполнять новый ряд. Тоже до 8 штук."""
# Если мы еще раз вызовем метод add у билдера и передадим ему еще кнопок - они также сначала будут заполнять до 8 предыдущий незаполненный ряд.
# Явно сообщаем билдеру сколько хотим видеть кнопок в 1-м и 2-м рядах

# Явно сообщаем билдеру сколько хотим видеть кнопок в 1-м и 2-м рядах,
# а также говорим методу повторять такое размещение для остальных рядов
kb_builder.adjust(2, 1, repeat=True)

"""Чтобы указать какое количество кнопок должно быть в каждом ряду - нужно передать в метод adjust целые числа (от 1 до 8), начиная с первого ряда. Причем данный метод будет игнорировать параметр width, если кнопки были добавлены в билдер методом row.

Можно указывать количество кнопок не для всех рядов. Тогда последующие ряды будут заполняться кнопками по значению последнего переданного аргумента. То есть, если у нас 7 кнопок, а мы в adjust добавили 2 и 1, то в первом ряду будет 2 кнопки, а во втором и последующих по одной."""
# Если после метода adjust мы будем добавлять еще кнопки методом row - они начнут добавляться с нового ряда, а если методом add, то будут заполнять последний ряд до 8 кнопок, также как это было в предыдущих примерах.
# Также у метода adjust есть параметр repeat, который по умолчанию равен False. Если сделать его True, то значения количества кнопок по рядам будут повторяться для новых рядов с кнопками.


# Этот хэндлер будет срабатывать на команду "/start"
# и отправлять в чат клавиатуру
@dp.message(CommandStart())
async def process_start_command(message: Message):
    # Методом as_markup() передаем клавиатуру как аргумент туда, где она требуется
    await message.answer(text='Вот такая получается клавиатура',
                        reply_markup=kb_builder.as_markup(
                        resize_keyboard=True))
    """ братите внимание, что параметр resize_keyboard=True, отвечающий за размер кнопок, который мы раньше передавали в ReplyKeyboardMarkup, теперь передается в метод билдера as_markup(), который, по сути, и превращает билдер в объект клавиатуры ReplyKeyboardMarkup."""
    # Reduce the height of the buttons
if __name__ == '__main__':
    dp.run_polling(bot)